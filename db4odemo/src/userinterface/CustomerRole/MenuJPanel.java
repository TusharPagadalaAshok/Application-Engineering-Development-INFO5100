/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.CustomerRole;

import Business.Customer.Customer;
import Business.EcoSystem;
import Business.Restaurant.Menu;
import Business.Restaurant.Restaurant;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author patus
 */
public class MenuJPanel extends javax.swing.JPanel {
    Restaurant res;
    EcoSystem system;
    ArrayList<Menu> items=new ArrayList<Menu>();
    private UserAccount userAccount;
    private JPanel userProcessContainer;
    int sum = 0;
    /**
     * Creates new form MenuJPanel
     */
     
    public MenuJPanel(JPanel userProcessContainer, UserAccount account,EcoSystem system,Restaurant res) {
        initComponents();
        System.out.println("in MenuJpanel");
        this.userProcessContainer = userProcessContainer;
        this.system=system;
        this.userAccount = account;
        this.res=res;
        populateMenuTable();
        
        greetings.setText("Menu card of " +  res.getResName());
        
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        MenuCardTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        CartTable = new javax.swing.JTable();
        TxtAddress = new javax.swing.JTextField();
        lbldeliveryAddress = new javax.swing.JLabel();
        RemoveFromCart = new javax.swing.JButton();
        AddtoOrder = new javax.swing.JButton();
        greetings = new javax.swing.JLabel();
        BtnBacktoCustomerPage = new javax.swing.JButton();
        OrderToRestaurant = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        TxtComments = new javax.swing.JTextField();
        lbldeliveryAddress1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(204, 204, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        MenuCardTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Item Name", "Ingredient", "Cost"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(MenuCardTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, 580, 180));

        CartTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Menu Item", "Ingredient", "Cost"
            }
        ));
        jScrollPane2.setViewportView(CartTable);
        if (CartTable.getColumnModel().getColumnCount() > 0) {
            CartTable.getColumnModel().getColumn(2).setResizable(false);
        }

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 110, 440, 180));

        TxtAddress.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        add(TxtAddress, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 400, 160, 190));

        lbldeliveryAddress.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbldeliveryAddress.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lbldeliveryAddress.setText("Delivery Address");
        add(lbldeliveryAddress, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 370, 140, 30));

        RemoveFromCart.setBackground(new java.awt.Color(255, 255, 204));
        RemoveFromCart.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        RemoveFromCart.setText("Remove From Cart");
        RemoveFromCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveFromCartActionPerformed(evt);
            }
        });
        add(RemoveFromCart, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 310, -1, -1));

        AddtoOrder.setBackground(new java.awt.Color(255, 255, 204));
        AddtoOrder.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        AddtoOrder.setText("Add To Order");
        AddtoOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddtoOrderActionPerformed(evt);
            }
        });
        add(AddtoOrder, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 320, 160, -1));

        greetings.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        greetings.setForeground(new java.awt.Color(255, 102, 102));
        greetings.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        add(greetings, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 40, 570, 30));

        BtnBacktoCustomerPage.setBackground(new java.awt.Color(255, 255, 153));
        BtnBacktoCustomerPage.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        BtnBacktoCustomerPage.setText("<<Back");
        BtnBacktoCustomerPage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnBacktoCustomerPageActionPerformed(evt);
            }
        });
        add(BtnBacktoCustomerPage, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, -1, -1));

        OrderToRestaurant.setBackground(new java.awt.Color(255, 255, 204));
        OrderToRestaurant.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        OrderToRestaurant.setText("Order>>");
        OrderToRestaurant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OrderToRestaurantActionPerformed(evt);
            }
        });
        add(OrderToRestaurant, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 520, 210, 60));

        jLabel2.setBackground(new java.awt.Color(255, 204, 204));
        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Customer Area");
        jLabel2.setOpaque(true);
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, 1240, 30));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText(" Cart");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 80, 310, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Menu");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 80, 170, 20));

        TxtComments.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TxtCommentsActionPerformed(evt);
            }
        });
        add(TxtComments, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 400, 150, 190));

        lbldeliveryAddress1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbldeliveryAddress1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbldeliveryAddress1.setText("Any Comments");
        add(lbldeliveryAddress1, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 370, 130, 30));
    }// </editor-fold>//GEN-END:initComponents

    private void AddtoOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddtoOrderActionPerformed
        // TODO add your handling code here:
       
        if((MenuCardTable.getSelectedRow()<0)){
            JOptionPane.showMessageDialog(this,"select a row!");
        }
        else{
            
            Menu item=(Menu)MenuCardTable.getValueAt(MenuCardTable.getSelectedRow(), 0);
            
            populateCart(item);
          
        }
    }//GEN-LAST:event_AddtoOrderActionPerformed

    private void BtnBacktoCustomerPageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnBacktoCustomerPageActionPerformed
        // TODO add your handling code here:
        
        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        CustomerAreaJPanel cuspanel = (CustomerAreaJPanel) component;
        cuspanel.populateRestaurantTable();
        cuspanel.populateOrderHistory();
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_BtnBacktoCustomerPageActionPerformed

    private void OrderToRestaurantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OrderToRestaurantActionPerformed
        // TODO add your handling code here:
        String address=TxtAddress.getText();
        String comments = TxtComments.getText();
        try{
        if((address==null || address.isEmpty()) && comments==null || comments.isEmpty()) 
        {
            
            throw new NullPointerException("Address or Comments field is Empty");
            
        }
        }catch(Exception e)
        {
            JOptionPane.showMessageDialog(this, "Address or Comments field is empty");
            return;
        }
        
        res.addNewOrder(res.getName(), userAccount.getUsername(), null, items, String.valueOf(sum) , address,  comments);
        for(Customer cust:system.getCustomerDirectory().getCustList()){
            if(userAccount.getUsername().equals(cust.getUserName())){
                cust.addOrder(res.getName(), userAccount.getUsername(), null, items, String.valueOf(sum) , address, comments);
            }
        }
        
        
        JOptionPane.showMessageDialog(null,"Your Order is placed!");
        sum=0;
//        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        CustomerAreaJPanel cuspage = (CustomerAreaJPanel) component;
        cuspage.populateRestaurantTable();
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
             
        
        
        
        
    }//GEN-LAST:event_OrderToRestaurantActionPerformed

    private void RemoveFromCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveFromCartActionPerformed
        // TODO add your handling code here:
        if(CartTable.getSelectedRow()<0){
            JOptionPane.showMessageDialog(null,"Please select a row from the cart.");
        }
        else{
            Menu item=(Menu)CartTable.getValueAt(CartTable.getSelectedRow(), 0);
            items.remove(item);
            int itemCost = Integer.parseInt(item.getPrice());
            sum=sum-itemCost;
            populateTableAfterRemoval();
        }
    }//GEN-LAST:event_RemoveFromCartActionPerformed

    private void TxtCommentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TxtCommentsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtCommentsActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddtoOrder;
    private javax.swing.JButton BtnBacktoCustomerPage;
    private javax.swing.JTable CartTable;
    private javax.swing.JTable MenuCardTable;
    private javax.swing.JButton OrderToRestaurant;
    private javax.swing.JButton RemoveFromCart;
    private javax.swing.JTextField TxtAddress;
    private javax.swing.JTextField TxtComments;
    private javax.swing.JLabel greetings;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbldeliveryAddress;
    private javax.swing.JLabel lbldeliveryAddress1;
    // End of variables declaration//GEN-END:variables

    private void populateMenuTable() {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        
           DefaultTableModel model = (DefaultTableModel) MenuCardTable.getModel();
        
            model.setRowCount(0);
                Object[] row = new Object[3];
                for(Menu item:res.getMenuItem()){
                     row[0] = item;
                     row[1] = item.getIngredients();
                     row[2] = item.getPrice();
                     model.addRow(row);
                }
    }
    public void populateCart(Menu OrderItem){
        DefaultTableModel model = (DefaultTableModel) CartTable.getModel();
        model.setRowCount(0);
        
         items.add(OrderItem);
         Object[] row = new Object[3];
                for(Menu item: items){
                     row[0] = item;
                     row[1] = item.getIngredients();
                     row[2] = item.getPrice();
                     sum = sum+Integer.parseInt(item.getPrice());
                     model.addRow(row);
                }  
     }

    private void populateTableAfterRemoval() {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        DefaultTableModel model = (DefaultTableModel) CartTable.getModel();
            model.setRowCount(0);
            Object[] row = new Object[3];
                for(Menu menuItem:items){
                     row[0] = menuItem;
                     row[1] = menuItem.getIngredients();
                     row[2] = menuItem.getPrice();
                     model.addRow(row);
                }
                
        



    }
    
}
